import "lib/primitives.fz"

/* Polymorphic list type */
typedef list = forall (A) . (mu XX => (() + (A, XX)));

// List constructors.
function nil forall(A) : list[A] {
    fold[list[A]] (inl[()][(A,list[A])]{()}) }

function cons forall(A) (hd :[] A) (tl :[] list[A]) : list[A] {
    fold[list[A]] (inr[()][(A,list[A])]{(hd,tl)}) }

// List destructors.

// head : A -o list(A) -o A
// Returns the head of the list or the default argument.
function head forall (A) (def :[] A) (lst :[] list[A]) : A {
  case unfold lst of {
     inl(_) => def
   | inr(y) => let (elem,rest) = y;
               elem
  }
}

// tail : list(A) -o list(A)
// Returns an empty list when given an empty list.
function tail forall (A)  (il :[] list[A]) : list[A] {
  case unfold il of {
     inl(_) => nil[A]
   | inr(y) => let (elem,rest) = y;
               rest
  }
}



// Insensitive and sensitive list maps.
function list_map forall(X, Y) (f : X -> Y) (lm : list[X]) : list[Y] {
  case unfold lm of {
      inl(x) => nil[Y]
    | inr(x) => let (h,t) = x;
                cons[Y] (f h) (list_map[X][Y] f t)
  }
}

function list_smap forall (X, Y) (s : num) (f :[] X -o[[s]] Y) (l :[[s]] list[X]) : list[Y] {
  function inner (lst :[[s]] list[X]) : list[Y] {
    case unfold lst of {
        inl(_) => nil[Y]
      | inr(x) => let (h,t) = x;
                  cons[Y] (f h) (inner t)
    }
  }
  inner l
}

// Sensitive and insensitive list folds.
function list_foldl forall (A, B) (f : (B -> A -> B)) (ac : B) (il : list[A]) : B {
  case unfold il of {
     inl(y) => ac
   | inr(y) => let (elem,rest) = y;
               list_foldl[A][B] f (f ac elem) rest
  }
}

function list_sfoldl forall (A, B) (s1 : num) (s2 : num) (f : (B -o[[s1]] A -o[[s2]] B)) (ac :[[s1]] B) (il :[[s2]] list[A]) : B {
  function inner (ac :[[s1]] B) (il :[[s2]] list[A]) : B {
    case unfold il of {
       inl(y) => ac
     | inr(y) => let (elem,rest) = y;
                 inner (f ac elem) rest
    }}
  inner ac il
}

// List length.
function length forall (A) (l :[] list[A]) : int {
  list_sfoldl[A][int] 1 1 (fun (n :[] int) { fun (l :[] A ) { n +. 1 } }) 0 l
}

// Sensitive and insensitive functions that take an index, a function, and a
// list and return a new list with the element at the given index updated
// by the given function.
function list_sperformAt forall(A) (s : num) (n :[] int) (f : A -o[[s]] A) (l :[[s]] list[A]) : list[A] {
  function inner (n :[] (mu X => (() + X))) (l :[[s]] list[A]) : list[A] {
    case unfold l of {
      inl(_)   => nil[A]
    | inr(xxs) => let (x,xs) = xxs;
                  case unfold n of {
                    inl(_)   => cons[A] (f x) xs
                  | inr(n')  => cons[A] x (inner n' xs)
                  }
    }
  }
  inner (intToPeano n) l
}

function list_performAt forall(A) (n : int) (f : A -> A) (l : list[A]) : list[A] {
  case unfold l of {
    inl(_)   => nil[A]
  | inr(xxs) => let (x,xs) = xxs;
                if n == 0 then { cons[A] (f x) xs } else { cons[A] x (list_performAt[A] (n -. 1) f xs) }
  }
}

// Sensitive and insensitive zip functions.
function list_szipWith forall(A,B,C) (s1 : num) (s2 : num) (f : A -o[[s1]] B -o[[s2]] C) : list[A] -o[[s1]] list[B] -o[[s2]] list[C] {
  function inner (l1 :[[s1]] list[A]) (l2 :[[s2]] list[B]) : list[C] {
    case unfold l1 of {
      inl(x) => nil[C]
    | inr(x) => case unfold l2 of {
                  inl(y) => nil[C]
                | inr(y) => let (xh,xt) = x; let (yh,yt) = y;
                            cons[C] (f xh yh) (inner xt yt)
                }
      }
  }
  inner
}

function list_zipWith forall(A,B,C) (f : A -> B -> C) (l1 : list[A]) (l2 : list[B]) : list[C] {
  case unfold l1 of {
    inl(x) => nil[C]
  | inr(x) => case unfold l2 of {
                inl(y) => nil[C]
              | inr(y) => let (xh,xt) = x; let (yh,yt) = y;
                          cons[C] (f xh yh) (list_zipWith[A][B][C] f xt yt)
              }
    }
}

// zip : list(A) -> list(B) -> list((A,B))
// zip [1,2,3] ["a","b","c"] = [(1,"a"),(2,"b"),(3,"c")]
// zip [1,2] [9,8,7,6,5,4,3] = [(1,9),(2,8)]
// zip [9,8,7,6,5,4,3] [1,2] = [(9,1),(8,2)]
function list_zip forall(A,B) (l1 :[] list[A]) (l2 :[] list[B]) : list[(A,B)] {
  list_szipWith[A][B][(A,B)] 1 1 pair[A][B] l1 l2
}


// A function to append two lists.
// list_append : list(A) -o list(A) -o list(A)
function list_append forall(A) (l1 :[] list[A]) (l2 :[] list[A]) : list[A] {
  case (unfold l1) of {
    inl(unit) => l2
  | inr(l) => let (h,t) = l;
              cons[A] h (list_append[A] t l2)
  }
}

// A function to concatenate a list of lists.
// list_concat list(list(A)) -o list(A)
function list_concat forall(A) (lsts :[] list[list[A]]) : list[A] {
  case (unfold lsts) of {
    inl(unit) => nil[A]
  | inr(p) => let (l1, lsts') = p;
              list_append[A] l1 (list_concat[A] lsts')
  }
}

// A list removal function
// remove : A -> list(A) -o list(A)
function remove
  forall(A)
  (elem : A)
  (lst :[] list[A])
  : list[A]
  {
    case (unfold lst) of {
      inl(_)    => nil[A]
    | inr(xxs)  => let (x,xs) = xxs;
                   if (x == elem) then { xs }
                                  else { cons[A] x ((remove[A] elem xs)) }
    }
}

// An indexing function for lists.
function index
  forall(A)
  (def :[] A)
  (ind : int)
  (lst :[] list[A])
  : A {
    if (ind <= 0) then {
      head[A] def lst
    } else {
      index[A] def (ind -. 1) (tail[A] lst)
    }
}

// Returns the first n elements of the list as a new list.
function take
  forall(A)
  (n : int)
  (lst :[] list[A])
  : list[A] {
    if (n == 0) then { nil[A] } else {
      case (unfold lst) of {
        inl(_)   => nil[A]
      | inr(xxs) => let (x,xs) = xxs;
                    cons x (take[A] (n -. 1) xs)
      }
    }
}

// Creates a list of length n with the value x for every entry.
function replicate forall(A) (n : int) (x : A) : list[A] {
  if n <= 0 then { nil[A] } else { cons[A] x (replicate[A] (n -. 1) x) }
}



// // insertion sort
// function cswp (e :[] (num, num)) : (num, num) {
//   let (x,y) = e;
//   if (x < y) then {
//     (x, y)
//   } else {
//     (y, x)
//   }
// }
// 
// function insSort (input:[] list(num)) : list(num) {
// 
//   function insert (y:[] num) (l : [] list(num)) : list(num){
//     case unfold l of {
//         inl(unit) => cons[num] y (nil[num])
//       | inr(x)    => let (h,t) = x;
//                      let (a,b) = cswp (y,h);
//                      cons[num] a (insert b t)
//     }
//   }
// 
//   case unfold input of {
//       inl(unit) => nil[num]
//     | inr(x)    => let (h,t)= x;
//                    insert h (insSort t)
//   }
// }


// listfuzz : list(fuzzy A) -o fuzzy list(A) [like mapM]
function listfuzz forall(A) (fl :[] list[fuzzy A]) : fuzzy list[A] {
  case unfold fl of {
      inl(_) => return nil[A]
    | inr(ht) =>
        let (lhead, ltail) = ht;
        sample y = lhead;
        sample tailsample = listfuzz[A] ltail;
        return (cons[A] y tailsample)
  }
}

// Show the given list, using the provided function to show the elements.
function showList 
  forall(A) 
  (pA : A -> string) 
  (lst : list[A]) 
  : string {
    function showListHelper (lst : list[A]) : string {
        case unfold lst of {
          inl(_) => "]"
        | inr(xxs) => let (x,xs) = xxs;
                      ","^(pA x)^(showListHelper xs)
        }
    }
    case unfold lst of {
      inl(_) => "[]"
    | inr(xxs) => let (x,xs) = xxs;
                  "["^(pA x)^(showListHelper xs)
    }
}

/*
  The listFromFile function reads the data from the file.
  Each line of the file corresponds to each element of the list.
  NOTE: This function only works when Adaptive Fuzz is run with the --no-compiler flag.
*/
primitive listFromFile forall(DATA) (maxLen : int) (file : string) : list[DATA] { "listFromFile" }

// Primitives for converting between the list and vector types.
primitive listToVector forall(A) (l :[] list[A]) : A vector { "listToVector" }
primitive vectorToList forall(A) (v :[] A vector) : list[A] { "vectorToList" }

()