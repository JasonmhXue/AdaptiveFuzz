
TODO created 2/22/2016
This file contains notes about bugs and feature requests for Adaptive Fuzz.


BUGS:
- 5/5/2017
    Marshaling doesn't always work right.  It works fine for simple things, but I can't
    get it to work with arrays or lists.  I've reverted to a home-made solution (See src/conversion.ml),
    but I feel like it would be better if Marshal worked (or a full-on lexer/parser solution).
    (Also see the FIXME in src/conversion.stringToFuzz)
- 6/24/2016
    I have some anecdotal (but not reproducible) evidence that the sensitivity checker may return NaN.
    I've made an attempt to address this, but as I have no test case to run it on, I'm not sure if it's
    still a bug or not.

Feature Requests:
- 1/25/2017
    Add test cases for secrecy of the sample (select operator).
    Add test cases for vectors and the functions that go with them.
- 2/23/2016
    Add better type inference.
- 5/10/2017
    The type checker is not very good about higher order functions.  That is, we need two functions
    for, say, list mapping: one that is insensitive (list_map) and one that is sensitive (list_smap).  It certainly feels
    like the compiler should be able to deduce that, if the function is not sensitive, then the
    list argument cannot be sensitive and vice versa.  That is, the sensitivity annotation on the
    function and on the list should just be the max of the sensitivities of the two.  Right now,
    it's not the smart.
- 5/10/2017
    Add a constant "inf" (or another name ...) which represents the "number" infinity.  This would
    be very useful to have so that it could be provided as an argument to be a sensitivity.
    Currently, because the num type does not have an infinity, there must be two different functions
    for e.g. list mapping, one for finite sensitivity and one for infinite.
    Will adding inf mess with anything else?  How does it play with numerical operators?
- 5/13/2017
    Update README.users to include more information about using Adaptive Fuzz (and writing Adaptive Fuzz programs?)

Ideas to improve performance
- 1/25/2017
    Use profiling to improve performance.  See http://caml.inria.fr/pub/docs/manual-ocaml-400/manual031.html
    For starters: Start a run with the big database, and then kill it once it creates its piece.  Recompile the piece with the
    profiler, and see what happens.  Use this data to inform what should be optimized.  Potentially:
    - Primml.vectorbagFromFile should generate vectors directly.
    - Vector operations should maybe be able to do in-place updates?  As is, vmap, vperformat, vzipwith all allocate new arrays.
    - Avoid uses of vectorToList and listToVector wherever possible
    Results of profiling are inconclusive (or I'm not interpreting them right).
- 1/20/2017
    It would be great if the database could be kept in memory between calls to runfuzz.  Is there some way to share this?
    It might mean that, instead of running a new ocaml process for each call to runfuzz, we have one curator process and
    channels to communicate between the analyst and curator.  This would mean we have to do some sort of "eval" to run the
    code though (possibly preventing compiler optimizations).  It's not clear if that's worth it.

Code Beautification:
- 5/5/2017
    There are a number of places (Prim.runRedZone is a great example) where I'm using the option type to deal with computations
    that may fail.  However, I would like to give different error messages depending on how the failure happens.  These should
    be changed to an Either type (like the Types.result type), and I should write a simple monadic bind for that type.
- 2/22/2016
    When primitive functions are interpreted, they can create new terms (e.g. result terms).  However, the current implementation 
    does not carry file info into primfun interpretation, so the terms are all lacking this data.  The interpretation of primfun 
    should be updated to take a fileinfo as an argument so that produced data and error messages are better.  This will affect 
    types, interpreter, and prim (and likely some other files as a side effect).
- 2/22/2016
    There are two monads used in this codebase, the checker monad for type checking and the interpreter monad for interpreting.  
    They are quite similar, but there is no monad module to allow sharing of similar functions (e.g. mapM, mapMSi, mapMTy, etc.).  
    This seems silly and rectifiable, but I don't quite know how to do it in ocaml.


Extended Documentation for in-code comments
- 5/14/2015 FIXME in src/conversion.ml (stringToFuzz)
     Tensor product reading only works if there's no nesting. This should all really be either marshaling or proper parsing.
- 4/10/2017 FIXME in src/primml.ml (readCmemFromFile)
    If the curator memory is not able to be read properly, the system will silently convert it to None.  This seems overly
    restrictive but probably isn't too bad.
- 2/23/2016 FIXME in lib/primitives.fz (p_sample)
    The sample operator is currently implemented as syntax because of the lack of type inference support.  Once type inference 
    is added, this could be changed to a primitive.
- 2/23/2016 TODO in src/math.ml
    The system may be vulnerable to floating point related attacks, and the way to address this may be to do our own 
    probability calculations (which are used for add_noise).
- 2/23/2016 TODO in src/parser.mly (extend_var)
    The Ctx module has been extended with extra support for adding variables to the context, but the parser is not yet making 
    use of this support.  Updating this shouldn't change any visible outputs, but it may make debugging the parser (after 
    future changes, say) easier.  Also, it's just a little cleaner and more elegant.
- 8/16/2016 NOTE in src/syntax.ml (tmEq)
    PVals are compared on structural equality only.  That is, two distributions may be indistinguishable but not equal.

