
// Testing out recursive and fixpoint operations

import "primitives.fz"

typedef rec = forall (A) . (mu X => (X -> A));
// out is unfold, in is fold

function y forall(A,B) (f : (A -> B) -> (A -> B)) : (A -> B) {
  (fun (x : rec[A -> B]) { fun (a : A) { f ((unfold x) x) a }})
    (fold[rec[A -> B]] (fun (x : rec[A -> B]) { fun (a : A) {f ((unfold x) x) a }}))
}


factabs = fun (fact : int -> int) { fun (x : int) {
  if x <= 0 then { 1 } else { op_imul x (fact (x -. 1)) }
}};


assertEq[int] "Fixpoint #1" (y[int][int] factabs 5) 120;
assertTyCheck[(int -> int) -> (int -> int)][int -> int] "Fixpoint #2" false 1 (y[int][int]);
assertTyCheck[int][int] "Fixpoint #3" false 1 (y[int][int] factabs);

"test"
