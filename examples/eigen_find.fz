

import "library-bags.fz"
import "library-vectors.fz"

/*
The sensitive data is a matrix.
A matrix is a vector of rows, which each are vectors of A values.
*/

typedef matrix = forall (A) . (A vector) vector;
typedef db = clipped matrix

// Finds the max of the absolute values of the given vector.
absumV = fun (v : nvec) : num {
  function maxabs (b : num) (a : num) : num { max (op_abs b) (op_abs a) }
  vfoldl[num][num] maxabs 0 v
}

function count (start : int) (end : int) : int list {
  if start > end then {
    nil[int]
  } else {
    cons[int] start (count (start +. 1) end)
  }
}

function matrixMult
  (eps : num)
  (numIters : int)
  (v : num vector)
  : num vector {
    function datafun (i : int) (db :[[eps * (absumV v)]] db) : fuzzy num {
      row = vindex[clipped vector] (listToVector[clipped] (nil[clipped])) i db;
      add_noise eps (vectorIP v row)
    }
    function mapfun (i : int) : num {
      rz = runFuzz[db][num] eps (datafun i)
      case rz of {
        inl(s) => print s; 0
        inr(r) => r
    }}
    nlist = count 0 ((vsize[num] v) -. 1);
    v' = vmap[int][num] mapfun nlist
    print (showVec[num] showNum v');
    v'' = normalize v';
    print ("Normalized to: "^(showVec[num] showNum v''));
    if numIters > 0 then {
      matrixMult eps (numIters -. 1) v''
    } else { v'' }
}

// WHITE ZONE
function main (args : string vector) : string {
  db = fun (u:()) {(db = ...)};
  loadDB[db] db (1, 0.00001);
  dbsize = ...;
  eps = ...;
  v = ...;
  numIters = 20;
  print "Find Eigenvector";
  print ("Îµ per iteration = "^showNum eps);
  print ("dbsize = "^showNum dbsize);
  print ("Number of iterations = "^showNum numIters);
  print ("Original v = "^(showVec[num] showNum v));
  matrixMult eps numIters v
}
main

